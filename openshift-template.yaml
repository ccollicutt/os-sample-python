---
apiVersion: v1
kind: Template
labels:
  app: os-sample-python-mysql
  template: os-sample-python-mysql
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.
metadata:
  annotations:
    description: |-
      An example python application.
    openshift.io/display-name: os-sample-python-mysql
    openshift.io/documentation-url: https://github.com/ccollicutt/os-sample-python
    openshift.io/long-description: os-sample-python-mysqll
    openshift.io/provider-display-name: ccollicutt
    openshift.io/support-url: https://github.com/ccollicutt/os-sample-python
    tags: python,mysql
    template.openshift.io/bindable: 'false'
  name: os-sample-python-mysql
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
  stringData:
    database-password: "${DATABASE_PASSWORD}"
    database-user: "${DATABASE_USER}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: "${NAME}"
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}:latest"
    source:
      git:
        ref: "${SOURCE_REPOSITORY_REF}"
        uri: "${SOURCE_REPOSITORY_URL}"
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:${PYTHON_VERSION}
          namespace: "${NAMESPACE}"
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}"
    strategy:
      recreateParams:
          failurePolicy: Retry
      type: Recreate
    template:
      metadata:
        labels:
          name: "${NAME}"
        name: "${NAME}"
      spec:
        containers:
        - env:
          - name: MYSQL_HOST
            value: "${DATABASE_SERVICE_NAME}"
          - name: MYSQL_DB
            value: "${DATABASE_NAME}"
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          image: " "
          livenessProbe:
            httpGet:
              path: "/healthcheck"
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 3
          name: os-sample-python-mysql
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: "/healthcheck"
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 60
            timeoutSeconds: 3
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - os-sample-python-mysql
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
        name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: MYSQL_DATABASE
            value: "${DATABASE_NAME}"
          image: " "
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER}
                -D ${DATABASE_NAME} -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_MYSQL_LIMIT}"
          volumeMounts:
          - mountPath: "/var/lib/mysql/data"
            name: data
        volumes:
        - emptyDir: {}
          name: data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.7
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange

parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: os-sample-python-mysql
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of python image to be used (3.5 or latest).
  displayName: PHP Version
  name: PYTHON_VERSION
  required: true
  value: '3.5'
- description: Maximum amount of memory the CakePHP container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MySQL container can use.
  displayName: Memory Limit (MySQL)
  name: MEMORY_MYSQL_LIMIT
  required: true
  value: 512Mi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/ccollicutt/os-sample-python
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the python service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: os_sample_python
- displayName: Database User
  name: DATABASE_USER
  required: true
  value: os_sample_python
- displayName: Database Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: DATABASE_PASSWORD
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: os-sample-python-mysql-service